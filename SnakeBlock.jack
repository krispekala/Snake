/**  This is will's version */
class SnakeBlock {
    
    field int x, y;
    field int size;
    field int direction; /** 0:up, 1:right, 2:down, 3:left */
    field int pendingDirection;

    constructor SnakeBlock new(int newX, int newY, int d) {
        let x = newX;
        let y = newY;
        let size = 5;
        let direction = d;
        let pendingDirection = direction;
        do draw();

        return this;    

    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    method void moveUp() {
        do erase();
        /** handle crossing top of screen */
        if(y < size) {
            y = 256;
        }
        let y = y - size;
        do draw();
        return;
    }

    method void moveRight() {
        do erase();
        /** handle crossing right side */
        if(x > 507) {
            x = 0 - size;
        }
        let x = x + size;
        do draw();
        return;
    }

    method void moveDown() {
        do erase();
        /** handle crossing bottom of screen */
        if(y > 251) {
            y = 0 - size;
        }
        let y = y + size;
        do draw();
        return;
    }

    method void moveLeft() {
        do erase();
        /** handle crossing top of screen */
        if(x < size) {
            x = 512;
        }
        let y = y - size;
        do draw();
        return;
    }

    method void move(int d) {
        if(direction == 0) {
            do moveUp();
            direction = pendingDirection;
            pendingDirection = d;
        }
        else if(direction == 1) {
            do moveRight();
            direction = pendingDirection;
            pendingDirection = d;
        }
        else if(direction == 2) {
            do moveDown();
            direction = pendingDirection;
            pendingDirection = d;
        }
        else if(direction == 3) {
            do moveLeft();
            direction = pendingDirection;
            pendingDirection = d;
        }
    }

}